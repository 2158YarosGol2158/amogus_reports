import logging
import asyncio
import json
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
from aiohttp.web import Request, Response
import aiohttp_jinja2
import jinja2
import aiohttp
import os
from pathlib import Path
import aiofiles

os.makedirs('media', exist_ok=True)
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# Telegram Bot Token
API_TOKEN = "7335306980:AAG87GPL3RtzxCCbdgcgpBmJpJi8-TX6WpE"

# ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤
REPORTS_CHAT_ID = "-1002363390445"


# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤
REPORT_CATEGORIES = ["–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª", "–°–ø–∞–º", "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", "–ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", "–î—Ä—É–≥–æ–µ"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (Finite State Machine)
class ReportStates(StatesGroup):
    waiting_for_type = State()  # admin –∏–ª–∏ user
    waiting_for_name = State()  # –∏–º—è/–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    waiting_for_category = State()  # –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–ø–æ—Ä—Ç–∞
    waiting_for_description = State()  # –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    waiting_for_proof = State()  # –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    waiting_for_anonymity = State()  # –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å (–¥–∞/–Ω–µ—Ç)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã —Ä–µ–ø–æ—Ä—Ç–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º —á–∞—Ç–æ–≤
TOPICS = {
    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": 46,  # ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è –∂–∞–ª–æ–± –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    "–£—á–∞—Å—Ç–Ω–∏–∫": 44       # ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è –∂–∞–ª–æ–± –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
}
# –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
reports = []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
routes = web.RouteTableDef()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞ Jinja2
aiohttp_jinja2.setup(app, loader=jinja2.FileSystemLoader('templates'))

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è aiogram 3.x
    buttons = [
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç")],
        [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤")]
    ]
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"+"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç —Å —Ä–µ–ø–æ—Ä—Ç–∞–º–∏.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç"
@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç")
async def create_report(message: types.Message, state: FSMContext):
    buttons = [
        [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")],
        [KeyboardButton(text="–£—á–∞—Å—Ç–Ω–∏–∫")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç:", reply_markup=keyboard)
    await state.set_state(ReportStates.waiting_for_type)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
@dp.message(ReportStates.waiting_for_type)
async def process_type(message: types.Message, state: FSMContext):
    if message.text not in ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–£—á–∞—Å—Ç–Ω–∏–∫"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' –∏–ª–∏ '–£—á–∞—Å—Ç–Ω–∏–∫' –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
        return
    
    await state.update_data(report_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è/–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ReportStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(ReportStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    
    buttons = []
    for category in REPORT_CATEGORIES:
        buttons.append([KeyboardButton(text=category)])
    
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)
    await state.set_state(ReportStates.waiting_for_category)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞
@dp.message(ReportStates.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text not in REPORT_CATEGORIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.")
        return
    
    await state.update_data(category=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ReportStates.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
@dp.message(ReportStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    
    buttons = [[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", 
                         reply_markup=keyboard)
    await state.set_state(ReportStates.waiting_for_proof)



# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
@dp.message(ReportStates.waiting_for_proof)
async def process_proof(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_list = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–ª–∏ –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∏ –∫ –º–µ–¥–∏–∞
    caption = ""
    if message.text and message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        if not message.media_group_id:  # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            proof = message.text
            await state.update_data(proof=proof, media_list=[])
        else:
            caption = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if message.photo:
        file_id = message.photo[-1].file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"photo_{file_id.replace(':', '_').replace('-', '_')}.jpg"
        file_save_path = f"media/{file_name}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, file_save_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        media_list.append({
            "type": "photo",
            "file_id": file_id,
            "file_path": file_save_path,
            "caption": caption if caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        })
        
        proof = f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {file_name})"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    elif message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name or f"document_{file_id.replace(':', '_').replace('-', '_')}"
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_save_path = f"media/{file_name}"
        await bot.download_file(file_path, file_save_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        media_list.append({
            "type": "document",
            "file_id": file_id,
            "file_path": file_save_path,
            "caption": caption if caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        })
        
        proof = f"–î–æ–∫—É–º–µ–Ω—Ç {file_name}"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    elif message.video:
        file_id = message.video.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"video_{file_id.replace(':', '_').replace('-', '_')}.mp4"
        file_save_path = f"media/{file_name}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, file_save_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        media_list.append({
            "type": "video",
            "file_id": file_id,
            "file_path": file_save_path,
            "caption": caption if caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        })
        
        proof = f"–í–∏–¥–µ–æ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_name})"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif message.voice:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_name = f"voice_{file_id.replace(':', '_').replace('-', '_')}.ogg"
        file_save_path = f"media/{file_name}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, file_save_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫
        media_list.append({
            "type": "voice",
            "file_id": file_id,
            "file_path": file_save_path,
            "caption": caption if caption else "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏"
        })
        
        proof = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {file_name})"
    
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞
    elif not message.text or message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        proof = "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã"
        media_list = []
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_media = data.get('media_list', [])
    if media_list:
        current_media.extend(media_list)
    
    await state.update_data(proof=proof, media_list=current_media)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –∏ –æ–∂–∏–¥–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –Ω–µ—ë
    if message.media_group_id:
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã, –æ–∂–∏–¥–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–µ–¥–∏–∞
        # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        await message.answer("–ü–æ–ª—É—á–µ–Ω–æ –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –º–µ–¥–∏–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    buttons = [
        [KeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")],
        [KeyboardButton(text="–ù–µ—Ç, —É–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=keyboard)
    await state.set_state(ReportStates.waiting_for_anonymity)

# –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
@dp.message(lambda message: message.text == "–ì–æ—Ç–æ–≤–æ" and message.chat.type == "private")
async def finish_media_upload(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == ReportStates.waiting_for_proof.state:
        buttons = [
            [KeyboardButton(text="–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")],
            [KeyboardButton(text="–ù–µ—Ç, —É–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")]
        ]
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
        await message.answer("–í—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ?", reply_markup=keyboard)
        await state.set_state(ReportStates.waiting_for_anonymity)

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞
@dp.message(ReportStates.waiting_for_anonymity)
async def process_anonymity(message: types.Message, state: FSMContext):
    is_anonymous = message.text == "–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ—Ä—Ç–∞
    report_data = {
        "report_type": data["report_type"],
        "user_name": data["user_name"],
        "category": data["category"],
        "description": data["description"],
        "proof": data["proof"],
        "is_anonymous": is_anonymous,
        "reporter_id": message.from_user.id if not is_anonymous else "–ê–Ω–æ–Ω–∏–º–Ω–æ",
        "reporter_username": message.from_user.username if not is_anonymous else "–ê–Ω–æ–Ω–∏–º–Ω–æ",
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "media_list": data.get("media_list", [])
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–æ–∫
    reports.append(report_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("reports.json", "w", encoding="utf-8") as f:
        json.dump(reports, f, ensure_ascii=False, indent=4)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ —á–∞—Ç
    report_message = (
        f"üì¢ –ù–û–í–´–ô –†–ï–ü–û–†–¢\n\n"
        f"üë§ –¢–∏–ø: {report_data['report_type']}\n"
        f"üîñ –ò–º—è: {report_data['user_name']}\n"
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {report_data['category']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {report_data['description']}\n\n"
    )
    
    if is_anonymous:
        report_message += f"üëÆ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ê–Ω–æ–Ω–∏–º–Ω–æ\n"
    else:
        report_message += f"üëÆ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{report_data['reporter_username']} (ID: {report_data['reporter_id']})\n"
    
    report_message += f"üìÖ –î–∞—Ç–∞: {report_data['date']}"
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    topic_id = TOPICS.get(report_data['report_type'], None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–¥–∏–∞ –≤ —á–∞—Ç
    media_files = data.get("media_list", [])
    
    if topic_id:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=REPORTS_CHAT_ID,
            text=report_message,
            message_thread_id=topic_id
        )
        
        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        for media in media_files:
            if media["type"] == "photo":
                await bot.send_photo(
                    chat_id=REPORTS_CHAT_ID,
                    photo=types.FSInputFile(media["file_path"]),
                    caption=media["caption"],
                    message_thread_id=topic_id
                )
            elif media["type"] == "document":
                await bot.send_document(
                    chat_id=REPORTS_CHAT_ID,
                    document=types.FSInputFile(media["file_path"]),
                    caption=media["caption"],
                    message_thread_id=topic_id
                )
            elif media["type"] == "video":
                await bot.send_video(
                    chat_id=REPORTS_CHAT_ID,
                    video=types.FSInputFile(media["file_path"]),
                    caption=media["caption"],
                    message_thread_id=topic_id
                )
            elif media["type"] == "voice":
                await bot.send_voice(
                    chat_id=REPORTS_CHAT_ID,
                    voice=types.FSInputFile(media["file_path"]),
                    caption=media["caption"],
                    message_thread_id=topic_id
                )
    else:
        # –¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞
        await bot.send_message(
            chat_id=REPORTS_CHAT_ID,
            text=report_message
        )
        
        for media in media_files:
            if media["type"] == "photo":
                await bot.send_photo(
                    chat_id=REPORTS_CHAT_ID,
                    photo=types.FSInputFile(media["file_path"]),
                    caption=media["caption"]
                )
            elif media["type"] == "document":
                await bot.send_document(
                    chat_id=REPORTS_CHAT_ID,
                    document=types.FSInputFile(media["file_path"]),
                    caption=media["caption"]
                )
            elif media["type"] == "video":
                await bot.send_video(
                    chat_id=REPORTS_CHAT_ID,
                    video=types.FSInputFile(media["file_path"]),
                    caption=media["caption"]
                )
            elif media["type"] == "voice":
                await bot.send_voice(
                    chat_id=REPORTS_CHAT_ID,
                    voice=types.FSInputFile(media["file_path"]),
                    caption=media["caption"]
                )
    
    await message.answer("‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ.", 
                         reply_markup=ReplyKeyboardRemove())
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤
@routes.get('/')
@aiohttp_jinja2.template('index.html')
async def index(request):
    return {"reports": reports, "categories": REPORT_CATEGORIES}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞ —Å —Å–∞–π—Ç–∞
@routes.post('/submit_report')
@aiohttp_jinja2.template('success.html')
async def submit_report(request):
    data = await request.post()
    
    is_anonymous = "is_anonymous" in data
    
    report_data = {
        "report_type": data.get('report_type', ''),
        "user_name": data.get('user_name', ''),
        "category": data.get('category', ''),
        "description": data.get('description', ''),
        "proof": data.get('proof', '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'),
        "is_anonymous": is_anonymous,
        "reporter_id": "web" if not is_anonymous else "–ê–Ω–æ–Ω–∏–º–Ω–æ",
        "reporter_username": data.get('reporter_username', 'web') if not is_anonymous else "–ê–Ω–æ–Ω–∏–º–Ω–æ",
        "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–æ–∫
    reports.append(report_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("reports.json", "w", encoding="utf-8") as f:
        json.dump(reports, f, ensure_ascii=False, indent=4)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –≤ —á–∞—Ç
    report_message = (
        f"üì¢ –ù–û–í–´–ô –†–ï–ü–û–†–¢ (—Å —Å–∞–π—Ç–∞)\n\n"
        f"üë§ –¢–∏–ø: {report_data['report_type']}\n"
        f"üîñ –ò–º—è: {report_data['user_name']}\n"
        f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {report_data['category']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {report_data['description']}\n\n"
        f"üîç –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {report_data['proof']}\n\n"
    )
    
    if is_anonymous:
        report_message += f"üëÆ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ê–Ω–æ–Ω–∏–º–Ω–æ\n"
    else:
        report_message += f"üëÆ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {report_data['reporter_username']}\n"
    
    report_message += f"üìÖ –î–∞—Ç–∞: {report_data['date']}"
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
    topic_id = TOPICS.get(report_data['report_type'], None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–ø–∏–∫–∞
    if topic_id:
        await bot.send_message(
            chat_id=REPORTS_CHAT_ID,
            text=report_message,
            message_thread_id=topic_id
        )
    else:
        await bot.send_message(
            chat_id=REPORTS_CHAT_ID,
            text=report_message
        )
    
    return {"report": report_data}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤"
@dp.message(lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤")
async def view_reports_site(message: types.Message):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: https://amogus-reports.onrender.com/")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–≤–µ—á–∞–ª —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
@dp.message(lambda message: message.chat.type == "private")
async def echo(message: types.Message):
    buttons = [
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç")],
        [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–π—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.", reply_markup=keyboard)

# –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã HTML –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def setup_templates():
    os.makedirs('templates', exist_ok=True)
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    with open('templates/index.html', 'w', encoding='utf-8') as f:
        f.write('''
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    margin: 0;
                    padding: 20px;
                    background: linear-gradient(135deg,#ff0000,#ff9900,#ff0000,#ff9900);
                }
                .container {
                    max-width: 800px;
                    margin: 0 auto;
                    background: #fff;
                    padding: 20px;
                    border-radius: 5px;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                }
                h1, h2 {
                    color: #333;
                }
                form {
                    margin-bottom: 30px;
                }
                .form-group {
                    margin-bottom: 15px;
                }
                label {
                    display: block;
                    margin-bottom: 5px;
                    font-weight: bold;
                }
                input, select, textarea {
                    width: 100%;
                    padding: 8px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                }
                .checkbox-group {
                    display: flex;
                    align-items: center;
                    margin-bottom: 15px;
                }
                .checkbox-group input {
                    width: auto;
                    margin-right: 10px;
                }
                .checkbox-group label {
                    display: inline;
                    font-weight: normal;
                }
                button {
                    background: linear-gradient(to bottom,#0004ff,#0059ff,#00ccff);
                    color: white;
                    border: none;
                    padding: 10px 15px;
                    border-radius: 4px;
                    cursor: pointer;
                }
                button:hover {
                    background: linear-gradient(to bottom,#000281,#003eb3,#0093b8);
                }
                .report {
                    background: #f9f9f9;
                    padding: 15px;
                    margin-bottom: 15px;
                    border-left: 4px solid #293af2;
                }
                .report h3 {
                    margin-top: 0;
                }
                .filters {
                    margin-bottom: 20px;
                }
                .anonymous-tag {
                    background: #f0ad4e;
                    color: white;
                    padding: 2px 5px;
                    border-radius: 3px;
                    font-size: 12px;
                    margin-left: 5px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h1>
                
                <h2>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç</h2>
                <form action="/submit_report" method="post">
                    <div class="form-group">
                        <label for="report_type">–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                        <select id="report_type" name="report_type" required>
                            <option value="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                            <option value="–£—á–∞—Å—Ç–Ω–∏–∫">–£—á–∞—Å—Ç–Ω–∏–∫</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="user_name">–ò–º—è/–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                        <input type="text" id="user_name" name="user_name" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–ø–æ—Ä—Ç–∞:</label>
                        <select id="category" name="category" required>
                            {% for category in categories %}
                            <option value="{{ category }}">{{ category }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</label>
                        <textarea id="description" name="description" rows="5" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="proof">–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ):</label>
                        <textarea id="proof" name="proof" rows="3"></textarea>
                    </div>
                    
                    <div class="checkbox-group">
                        <input type="checkbox" id="is_anonymous" name="is_anonymous">
                        <label for="is_anonymous">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ</label>
                    </div>
                    
                    <div class="form-group" id="reporter_info">
                        <label for="reporter_username">–í–∞—à–µ –∏–º—è –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç:</label>
                        <input type="text" id="reporter_username" name="reporter_username">
                    </div>
                    
                    <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç</button>
                </form>
                
                <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã</h2>
                <div class="filters">
                    <label>–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: </label>
                    <select id="type-filter" onchange="filterReports()">
                        <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
                        <option value="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</option>
                        <option value="–£—á–∞—Å—Ç–Ω–∏–∫">–£—á–∞—Å—Ç–Ω–∏–∫–∏</option>
                    </select>
                    
                    <label style="margin-left: 15px;">–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: </label>
                    <select id="category-filter" onchange="filterReports()">
                        <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                        {% for category in categories %}
                        <option value="{{ category }}">{{ category }}</option>
                        {% endfor %}
                    </select>
                </div>
                
                <div id="reports-list">
                    {% if reports %}
                        {% for report in reports %}
                        <div class="report" data-type="{{ report.report_type }}" data-category="{{ report.category }}">
                            <h3>–†–µ–ø–æ—Ä—Ç –Ω–∞ {{ report.report_type }}: {{ report.user_name }}
                                {% if report.is_anonymous %}
                                <span class="anonymous-tag">–ê–Ω–æ–Ω–∏–º–Ω–æ</span>
                                {% endif %}
                            </h3>
                            <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {{ report.category }}</p>
                            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {{ report.description }}</p>
                            <p><strong>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</strong> {{ report.proof }}</p>
                            <p><strong>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</strong> {{ report.reporter_username }}</p>
                            <p><strong>–î–∞—Ç–∞:</strong> {{ report.date }}</p>
                        </div>
                        {% endfor %}
                    {% else %}
                        <p>–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ø–æ—Ä—Ç–æ–≤.</p>
                    {% endif %}
                </div>
            </div>
            
            <script>
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤
                function filterReports() {
                    const typeFilter = document.getElementById('type-filter').value;
                    const categoryFilter = document.getElementById('category-filter').value;
                    const reports = document.querySelectorAll('.report');
                    
                    reports.forEach(report => {
                        const typeMatch = typeFilter === 'all' || report.dataset.type === typeFilter;
                        const categoryMatch = categoryFilter === 'all' || report.dataset.category === categoryFilter;
                        
                        if (typeMatch && categoryMatch) {
                            report.style.display = 'block';
                        } else {
                            report.style.display = 'none';
                        }
                    });
                }
                
                // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–º –∏–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
                document.getElementById('is_anonymous').addEventListener('change', function() {
                    const reporterInfo = document.getElementById('reporter_info');
                    if (this.checked) {
                        reporterInfo.style.display = 'none';
                    } else {
                        reporterInfo.style.display = 'block';
                    }
                });
            </script>
        </body>
        </html>
        ''')
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞
    with open('templates/success.html', 'w', encoding='utf-8') as f:
        f.write('''
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    margin: 0;
                    padding: 20px;
                    background-color: #f4f4f4;
                }
                .container {
                    max-width: 800px;
                    margin: 0 auto;
                    background: #fff;
                    padding: 20px;
                    border-radius: 5px;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                    text-align: center;
                }
                h1 {
                    background: linear-gradient(to bottom, #0004ff, #0059ff, #00ccff);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    margin-bottom: 20px;
                }
                .report-details {
                    text-align: left;
                    background: #f9f9f9;
                    padding: 20px;
                    border-radius: 5px;
                    margin: 20px 0;
                    border-left: 4px solid #293af2;
                }
                
                .btn {
                    display: inline-block;
                    background: linear-gradient(to bottom,#0004ff,#0059ff,#00ccff);
                    color: white;
                    text-decoration: none;
                    padding: 10px 20px;
                    border-radius: 4px;
                    margin-top: 20px;
                }
                .btn:hover {
                    background: linear-gradient(to bottom,#000281,#003eb3,#0093b8);
                }
                .anonymous-tag {
                    background: #f0ad4e;
                    color: white;
                    padding: 2px 5px;
                    border-radius: 3px;
                    font-size: 12px;
                    margin-left: 5px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>–†–µ–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</h1>
                
                <div class="report-details" class="gradient-border">
                    <h2>–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–∞
                        {% if report.is_anonymous %}
                        <span class="anonymous-tag">–ê–Ω–æ–Ω–∏–º–Ω–æ</span>
                        {% endif %}
                    </h2>
                    <p><strong>–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {{ report.report_type }}</p>
                    <p><strong>–ò–º—è/–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong> {{ report.user_name }}</p>
                    <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {{ report.category }}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {{ report.description }}</p>
                    <p><strong>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</strong> {{ report.proof }}</p>
                    <p><strong>–î–∞—Ç–∞:</strong> {{ report.date }}</p>
                </div>
                
                <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –í–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.</p>
                
                <a href="/" class="btn">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        </body>
        </html>
        ''')

async def keep_alive():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –∑–∞—Å—ã–ø–∞–Ω–∏–µ."""
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                await session.get("https://amogus-reports.onrender.com/")
                logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        
        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏–Ω–≥–∞
        await asyncio.sleep(60)  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.add_routes(routes)
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    setup_templates()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists("reports.json"):
        try:
            with open("reports.json", "r", encoding="utf-8") as f:
                global reports
                reports = json.load(f)
        except:
            pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    
    print("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://amogus-reports.onrender.com/")

    asyncio.create_task(keep_alive())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
